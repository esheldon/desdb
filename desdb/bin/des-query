#!/usr/bin/env python
"""
    %prog [options]

Take the query on standard input, or via the -q parameter.  Write the results
on standard output.

username/password are by default gotten from ~/.netrc, but can be sent as
options
"""

import sys
from sys import stdin,stdout
import desdb


from optparse import OptionParser
parser=OptionParser(__doc__)
parser.add_option("-q","--query",default=None, help="A query to execute instead of stdin.")

parser.add_option("-u","--user",default=None, help="Username.")
parser.add_option("-p","--password",default=None, help="Password.")
parser.add_option("--host",default=None, help="over-ride default host")

parser.add_option("--port",
                  default=desdb.desdb._defport,
                  help="port number, default '%default'")

parser.add_option("--dbname",
                  default=desdb.desdb._defdb,
                  help="database name, default '%default'")

parser.add_option("-s","--show",action='store_true', help="Show query on stderr.")

parser.add_option("-f","--format",default=None,
    help=("File format for output.  csv,space,tab,json,cjson,pyobj,pretty."
          "Default %default for ordinary queries."))
parser.add_option('--nohead',action='store_true', help="do not print the header")

parser.add_option("-d","--describe",default=None, 
                  help="Describe the given table.")
parser.add_option("-c","--comments",action='store_true',
                  help="Show column comments when describing a table")

parser.add_option("-l","--list-tables",action='store_true', 
                  help="List available tables. Default format is 'pretty'")


def get_conn(options):
    conn=desdb.Connection(user=options.user,
                          password=options.password,
                          host=options.host,
                          dbname=options.dbname,
                          port=options.port)
    return conn

def main():

    options,args = parser.parse_args(sys.argv[1:])

    if options.describe is not None:
        table=options.describe

        format=options.format
        if options.format is None:
            format='pretty'

        conn=get_conn(options)
        conn.describe(table, show=options.show, comments=options.comments,
                      fmt=format)

    elif options.list_tables:
        format=options.format
        if options.format is None:
            format='pretty'

        conn=get_conn(options)
        conn.list_tables(show=options.show, fmt=format)
    else:
        query=options.query
        if options.query is None:
            query = stdin.read()

        format=options.format
        if options.format is None:
            format='csv'

        conn=get_conn(options)

        if options.nohead:
            header=False
        else:
            header='names'

        res=conn.quickWrite(query,show=options.show,fmt=format,header=header)

if __name__=="__main__":
    main()
