#!/usr/bin/env python
"""
    %prog [options] fits_file table_name control_file

Convert the fits file to an ascii control file that can be loaded into a
database table using sqlldr

    sqlldr username/pass@host:port/dbname control=control_file

Optionally write the create table statement to a file named

    {control_file}.create.sql

Array columns in the fits file are converted to scalar columns following
the convention

    name -> name_i

where i runs over the number of elements, 1-offset.  For 2-d arrays

    name -> name_i_j


You can also send --band-cols= to specify array columns that
hold information for each band.  the --bands keyword holds the
band character that correspond to each index.  E.g.

    des-fits2table --bands g,r,i,z --band-cols flux,flux_cov

these columns get written as so

    flux_g
    flux_r
    ...
    flux_cov_g_g
    flux_cov_g_r
    ...

Internally, the following function is run

    import desdb
    desdb.array2table(...)


caveats

    You should use the fitsio package if you have array columns with more than
    one dimension.  pyfits will read them as 1-d so the index naming will fail!

"""

import sys
from sys import stdin,stdout
import desdb


from optparse import OptionParser
parser=OptionParser(__doc__)
parser.add_option('--create',action='store_true',
                  help=("write the create table statement to "
                        "{control_file}.create.sql"))
parser.add_option('--bands',default=None,
                  help=("comma separated list of band characters, "
                        "to convert index number to band characer "
                        "for arrays that contain band-dependent info."
                        " for example g,r,i,z"))
parser.add_option('--band-cols',default=None,
                  help=("comma separated list of array columns that "
                        "contain band-dependent information.  The "
                        "bands keyword is used to convert index name "
                        "to band character for these columns"))
parser.add_option('--ext',default=None,
                  help=("extension to read, number or string. "
                        "Default is first with data"))

try:
    import fitsio
    have_fitsio=True
except:
    have_fitsio=False

try:
    import pyfits
    have_pyfits=True
except:
    try:
        import astropy.io.fits as pyfits
        have_pyfits=True
    except:
        have_pyfits=False

def read_data_fitsio(filename, extin=None):
    print 'reading fitsio'
    try:
        ext=int(extin)
    except:
        ext=extin

    return fitsio.read(filename, ext=ext)

def read_data_pyfits(filename, ext=None):
    print 'reading pyfits'
    # need two separate names becuase pyfits won't take a string through ext=
    ext_num,ext_string=get_ext_pyfits(ext)
    if ext_num is not None:
        data=pyfits.getdata(filename, ext=ext_num)
    else:
        data=pyfits.getdata(filename, extname=ext_string)

    return data

def csv2list(data):
    if data is not None:
        data=[d for d in data.split(',')]

    return data

def get_ext_pyfits(ext_string):
    """
    Need to return both due to pyfits stupidity
    """
    try:
        ext_num=int(ext_string)
    except:
        ext_num=None

    return ext_num, ext_string

def main():

    options,args = parser.parse_args(sys.argv[1:])
    if len(args) < 2:
        parser.print_help()
        sys.exit(1)

    fits_file=args[0]
    table_name=args[1]
    control_file=args[2]

    bands=csv2list(options.bands)
    band_cols=csv2list(options.band_cols)

    if have_fitsio:
        data=read_data_fitsio(fits_file, options.ext)
    elif have_pyfits:
        data=read_data_pyfits(fits_file, options.ext)
    else:
        raise ImportError("could not load fitsio or pyfits")

    desdb.desdb.array2table(data, table_name, control_file,
                            bands=bands,
                            band_cols=band_cols,
                            create=options.create)

main()
