#!/bin/bash
# DEPRECATED, DONT USE
# Download DES files. 
#
#  usage:  wget-des [options] type run [band]
#
# type is the file type, "red" or "coadd" "raw"
# band is ignored for type = "raw" and "opsred"
#
# put your user name and password in ~/.netrc. Don't make it
# readable to anyone but you.
#
# All data are copied under the $DESDATA directory
#
#   $DESDATA/DES/{type}/${run}/{type}/...
#   $DESDATA/DTS/{type}/${run}/{type}/...
#   $DESDATA/OPS/{type}/${run}/{type}/...
#
# Author
#   Erin Sheldon, Brookhaven National Laboratory
# Changes
#   2013-01-13:
#     moved to using new https address.  This now requires user
#     login and password.  These should be stored in ~/.netrc
#
#        machine {host} login {login} password {password}
#   
#

function usage_and_exit {
    echo "
Usage 
        wget-des [options] type run [band]

Description

        Download images and catalogs for the input file type, run identifier
        and band.  The data are downloaded from

            \$DESREMOTE/DES/{type}/{run}/{type} 
        
        (although DES could be DTS or OPS) and downloaded to 
        
            \$DESDATA/DES/{type}/{run}/{type} 
        
        where \$DESDATA is an environment variable pointing to the base of your
        DES data area and \$DESREMOTE is the url of the server.
        
Arguments
        type: one of 'red' 'coadd' 'raw'
            note 'commsrc' also works for raw
        run:  The run identifier
        band: g,r,i,z,Y
            ignored for raw
"
    exit 45
}

echo "THIS COMMAND IS DEPRECATED, DONT USE IT"

#if [[ ! -e ~/.desdb_pass ]]; then
#    echo "put your user/pass in ~/.desdb_pass"
#    exit 1
#fi

#read user pass <<< $(cat ~/.desdb_pass)

if [[ ${DESDATA:+1} == "" ]]; then
    echo "set DESDATA environment variable"
    exit 45
fi
if [[ ${DESREMOTE:+1} == "" ]]; then
    echo "set DESREMOTE environment variable"
    exit 45
fi

dir="$DESDATA"
remote_dir="$DESREMOTE"

download_type="$1"
run="$2"
band="$3"

if [[ $download_type == "commsrc" ]]; then
    download_type="raw"
fi

if [[ $download_type == "raw" ]]; then
    dir="$dir/DTS"
    remote_dir="$remote_dir/DTS"
elif [[ $download_type == "opsred" ]]; then
    dir="$dir/OPS"
    remote_dir="$remote_dir/OPS"
else
    dir="$dir/DES"
    remote_dir="$remote_dir/DES"
fi

if [[ $download_type == "red" || $download_type == "coadd" ]]; then
    echo "send band"
    usage_and_exit
fi
case $download_type in
    "red") 
        accept="*-${band}-*[0-9].fits.fz,*-${band}-*_cat.fits"
        type="red"
        ;;
    "coadd")
        accept="*${band}.fits.fz,*${band}_cat.fits"
        type="coadd"
        ;;
    "raw")
        accept="*.fits.fz"
        type="src"
        dir=$dir/comm 
        ;;
    "opsred")
        accept="*"
        type="red"
        ;;
      *) usage_and_exit
        ;;
esac

local_url=$dir/${type}/${run}/${type}
url="${remote_dir}/${type}/${run}/${type}"

echo "
    type:    $type
    run:     $run
    band:    $band
    url:     $url
    dir:     $dir
"

if [[ ! -e $local_url ]]; then
    echo "making dir: $local_url"
    mkdir -p "$local_url"
    if [[ $? != "0" ]]; then
        echo "failed to make dir, exiting"
        exit 45
    fi
fi

echo "chdir to dir $local_url"
cd "$local_url"
if [[ "$?" != "0" ]]; then
    echo "Failed to chdir to: $local_url"
    exit 45
fi

# No following slash on URL or it won't work!
# -c means continue downloading, as opposed to name.1 business
# -nH no host directories
# use -nv for non-verbose 
#    --progress=dot:mega     \
wget                        \
    --no-check-certificate  \
    -c                      \
    -nv                     \
    --mirror                \
    -nH                     \
    --cut-dirs=6            \
    --no-parent             \
    --tries 50              \
    --accept "$accept"      \
    "$url"
