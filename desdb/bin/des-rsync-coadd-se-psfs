#!/usr/bin/env python
"""
Download the psf files for single-epoch images used in a coadd

For simplicity, all files from the associated directories are downloaded, even
if not used in a coadd.  This may be helpful for diagnostics.
 
Here is an example path
 
$DESDATA/OPS/finalcut/Y2A1/Y3-2371/20150823/D00466841/p02/psf/D00466841_i_c33_r2371p02_psfexcat.psf
 
Author
    Erin Sheldon, Brookhaven National Laboratory
 
Creation
    2016-11-02
 
Changes
""" 

from __future__ import print_function

import os
import time
import desdb
from desdb import files

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('release', help='release, e.g. y3a1_coass')
parser.add_argument('tilename', help='coadd tilename, e.g. DES0157-3914')
parser.add_argument('--bands', default=None,
                    help='restrict to the given band, e.g. r or g,r,i')

parser.add_argument('--dbname', default='dessci', help='database to use')

def try_make_dir(dir, ntry=3):
    
    for i in xrange(ntry):
        if not os.path.exists(dir):
            try:
                os.makedirs(dir)
                break
            except OSError as err:
                print("failed to make directory:", dir)
                time.sleep(1)

    if not os.path.exists(dir):
        raise err

def download_psfs(remote_dir, local_dir, args):
    """
    from the end_path, generate the local directory and
    full remote URL.  Then run rsync to get the files
    """

    try_make_dir(local_dir)

    cmd="""
rsync                                     \\
    -av                                   \\
    --password-file "$DES_RSYNC_PASSFILE" \\
    "{remote_dir}/"                       \\
    "{local_dir}/"
"""
    
    cmd=cmd.format(remote_dir=remote_dir, local_dir=local_dir)

    print(cmd)

    retval=os.system(cmd)
    if retval != 0:
        raise IOError("failed to download psf files")


def main():
    args=parser.parse_args()

    bands=args.bands
    if bands is not None:
        bands = bands.split(',')

    path_data = files.get_coadd_se_psf_info(
        args.release,
        args.tilename,
        bands=bands,
        dbname=args.dbname,
    )

    print("found total of",len(path_data),"files")

    # get unique directories
    pdict = {}
    for p in path_data:

        local_dir=p['local_dir']

        pdict[local_dir] = {
            'local_dir':local_dir,
            'remote_dir':p['remote_dir'],
        }

    print("found",len(pdict),"unique directories")
    for key,p in pdict.iteritems():
        download_psfs(p['remote_dir'], p['local_dir'], args)

if __name__=="__main__":
    main()
